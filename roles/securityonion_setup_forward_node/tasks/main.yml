
---

- name: Check interfaces configuration #Si usa SUDO
  import_tasks: interfaces_check.yml

  # Siempre y cuando sea distinto al actual hostname cambia el Host name
- name: Change hostname #Si usa SUDO
  import_tasks: change_hostname.yml
  when: 'not ("{{ansible_hostname}}" == "{{HOST_NAME}}")'

- name: Create user "admincsirt" for managment Forward Node.
  become: yes
  become_user: root
  user:
    name: admincsirt
    password: "{{ admin_password | password_hash('sha512') }}"
    groups: # Empty by default, here we give it some groups
     - sudo
    state: present
    shell: /bin/bash       # Defaults to /bin/bash
    system: no             # Defaults to no
    createhome: yes        # Defaults to yes

- name: Copy authorized_key from root to admincsirt user
  import_tasks: authorized_keys_copy_from_root_to_admincsirt.yml

- name: Generate and copy public key to Master
  import_tasks: ssh_authentication_generate.yml

- name: Collect facts
  setup:
    gather_subset:
       - all

- name: Disable automatic updates (set Update-Package-Lists in /etc/apt/apt.conf.d/10periodic ) 
  become: yes
  become_user: root
  replace:
    path: /etc/apt/apt.conf.d/10periodic
    regexp: (?<=Update-Package-Lists ").+?(?=\";) # toma y reemplaza lo que esta despues de "set-cpu-affinity:"
    replace: 0

- name: Install pexpect #Si usa SUDO
  become: yes
  become_user: root
  apt:
    name: python-pexpect
    update_cache: yes

- name: Install python3-pexpect #Si usa SUDO
  become: yes
  become_user: root
  apt:
    name: python3-pexpect
    update_cache: yes

- name: Install python-ipaddress #Si usa SUDO
  become: yes
  become_user: root
  apt:
    name:  python-ipaddress
    update_cache: yes

- name: Check if Security Onion package exists #Si usa SUDO
  shell: command -v sosetup
  register: installed_sosetup
  ignore_errors: True

- name: Install Security Onion packages if they do not exist in the system #Si usa SUDO
  import_tasks: install_packages_forward.yml
  when: installed_sosetup is failed

- name: Create user "{{ ansible_hostname }}" with Sudo privileges in Master Node  #Si usa SUDO del Master
  import_tasks: user_create_master_node.yml

- name: Create a file named ansible.{random}.conf
  tempfile:
    state:  file
    suffix: .conf
  register: temp_config
  
- name: Copy content sosetup_forward.conf in "{{ temp_config.path }}"
  copy:
    src:  sosetup_forward.conf #from files folder in this role
    dest: "{{ temp_config.path }}"

- name: Remplazo variables de host_vars en el config para el forward en "{{ temp_config.path }}" 
  lineinfile: 
   path: "{{ temp_config.path }}"
   regexp:  "{{ item.regexp }}"
   line: "{{ item.line }}"
  with_items:
   - {regexp: '^MGMT_INTERFACE=', line: "MGMT_INTERFACE='{{ MGMT_INTERFACE }}'"}
   - {regexp: '^MGMT_CONFIG_TYPE=', line: "MGMT_CONFIG_TYPE='{{ MGMT_CONFIG_TYPE }}'"}
   - {regexp: '^ADDRESS=', line: "ADDRESS='{{ ADDRESS }}'"}
   - {regexp: '^NETMASK=', line: "NETMASK='{{ NETMASK }}'"}
   - {regexp: '^GATEWAY=', line: "GATEWAY='{{ GATEWAY }}'"}
   - {regexp: '^NAMESERVER=', line: "NAMESERVER='{{ NAMESERVER }}'"}
   - {regexp: '^DOMAIN=', line: "DOMAIN='{{ DOMAIN }}'"}
   - {regexp: '^SNIFFING_INTERFACES=', line: "SNIFFING_INTERFACES='{{ SNIFFING_INTERFACES }}'"}
   - {regexp: '^SERVERNAME=', line: "SERVERNAME='{{ SERVERNAME }}'"}
   - {regexp: '^SSH_USERNAME=', line: "SSH_USERNAME='{{ ansible_hostname }}'"}
   - {regexp: '^PF_RING_SLOTS=', line: "PF_RING_SLOTS={{ PF_RING_SLOTS }}"} 
   - {regexp: '^IDS_ENGINE=', line: "IDS_ENGINE='{{ IDS_ENGINE }}'"}
   - {regexp: '^IDS_LB_PROCS=', line: "IDS_LB_PROCS='{{ IDS_LB_PROCS }}'"}
   - {regexp: '^HOME_NET=', line: "HOME_NET='{{ HOME_NET }}'"}
   - {regexp: '^BRO_LB_PROCS=', line: "BRO_LB_PROCS='{{ BRO_LB_PROCS }}'"}
   - {regexp: '^PCAP_OPTIONS=', line: "PCAP_OPTIONS='{{ PCAP_OPTIONS }}'"}
   - {regexp: '^PCAP_SIZE=', line: "PCAP_SIZE='{{ PCAP_SIZE }}'"}
   - {regexp: '^PCAP_RING_SIZE=', line: "PCAP_RING_SIZE='{{ PCAP_RING_SIZE }}'"}
   - {regexp: '^WARN_DISK_USAGE=', line: "WARN_DISK_USAGE='{{ WARN_DISK_USAGE }}'"}
   - {regexp: '^CRIT_DISK_USAGE=', line: "CRIT_DISK_USAGE='{{ CRIT_DISK_USAGE }}'"}


- name: Execute sosetup for forward #Si usa SUDO
  include_role:
    name: securityonion_run_sosetup
  vars:
    sosetupfilepath: "{{ temp_config.path }}"

- name: Execute BRO config #Si usa SUDO
  import_tasks: affinity_BRO.yml

- name:  Execute SURICATA config #Si usa SUDO
  import_tasks: affinity_SURICATA.yml

- name:  Configure Linux Disk Caching #Si usa SUDO
  import_tasks: cache_linux.yml

- name: Copy classification.config in /etc/nsm/rules/ (and create a backup) #Si usa SUDO
  become: yes
  become_user: root
  copy:
    src: "{{ role_path }}/files/clasiffication_rules/classification.config" #from files folder roles"
    dest: /etc/nsm/rules/classification.config
    backup: yes
    mode: 'preserve' #preserve permissions

- name: Copy TheHive rules to elastalert in MasterNode for The Hive master #Si usa SUDO del Master
  include_role:
    name: copy_hive_rules_to_master
  when:  ' "{{ COPY_THEHIVE_RULES_MASTER }}" in "yes" '
  vars:
    aux_name: "master" 
    hive_host: "{{ hive_host_master }}"
    hive_port: "{{ hive_port_master }}"
    hive_apikey: "{{ hive_apikey_master }}"

- name: Copy TheHive rules to elastalert in MasterNode for The Hive secondary #Si usa SUDO del Master
  include_role:
    name: copy_hive_rules_to_master
  when:  ' "{{ COPY_THEHIVE_RULES_SECONDARY }}" in "yes" '
  vars:
    aux_name: "secondary" 
    hive_host: "{{ hive_host_secondary }}"
    hive_port: "{{ hive_port_master_secondary }}"
    hive_apikey: "{{ hive_apikey_master_secondary }}"
    
- name: Install telegraf #Si usa SUDO
  include_role:
    name: telegraf_install
  when:  ' "{{ INSTALL_TELEGRAF }}" in "yes" '

#Elimina los privilegios del usuario en el nodo master
- name: Delete privileges for user "{{ ansible_hostname }}" in Master Node #Si usa SUDO 
  import_tasks: user_delete_master_node.yml

#Elimina los privilegios del usuario en el nodo master
- name: Delete SSH keys created for this Ansible in Master and Forward 
  import_tasks: ssh_authentication_delete.yml

- name: Reboot machine #Si usa SUDO 
  become: yes
  become_user: root
  reboot:
    reboot_timeout: 1000



