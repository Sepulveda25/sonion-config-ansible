---

- name: Check if {{ MGMT_INTERFACE }} exist
  fail:
    msg: "Interface {{ MGMT_INTERFACE }} no existe "
  failed_when: not (ansible_interfaces | intersect(MGMT_INTERFACE))

- name: Change hostname
  import_tasks: change_hostname.yml
  when: 'not ("{{ansible_hostname}}" == "{{HOST_NAME}}")'

- name: Create user "admincsirt" for managment Forward Node.
  become: yes
  become_user: root
  user:
    name: admincsirt
    password: "{{ admin_password | password_hash('sha512') }}"
    groups: # Empty by default, here we give it some groups
     - sudo
    state: present
    shell: /bin/bash       # Defaults to /bin/bash
    system: no             # Defaults to no
    createhome: yes        # Defaults to yes

#- name: Copy authorized_key from root to admincsirt user
# import_tasks: authorized_keys_copy_from_root_to_admincsirt.yml

- name: Collect facts
  setup:
    gather_subset:
       - all

- name: Disable automatic updates (set Update-Package-Lists in /etc/apt/apt.conf.d/10periodic ) 
  become: yes
  become_user: root
  replace:
    path: /etc/apt/apt.conf.d/10periodic
    regexp: (?<=Update-Package-Lists ").+?(?=\";) # toma y reemplaza lo que esta despues de "set-cpu-affinity:"
    replace: 0

- name: Install pexpect
  become: yes
  become_user: root
  apt:
    name: python-pexpect
    update_cache: yes

- name: Install python3-pexpect
  become: yes
  become_user: root
  apt:
    name: python3-pexpect
    update_cache: yes

- name: Check if Security Onion package exists 
  shell: command -v sosetup
  register: installed_sosetup
  ignore_errors: True

- name: Install Security Onion packages if they do not exist in the system
  import_tasks: install_packages_master.yml
  when: installed_sosetup is failed 

- name: Create a file named ansible.{random}.conf
  tempfile:
    state:  file
    suffix: .conf
  register: temp_config
  
- name: Copy content sosetup_master.conf in "{{ temp_config.path }}"
  copy:
    src:  sosetup_master.conf #from files folder in this role
    dest: "{{ temp_config.path }}"

    
- name: Remplazo variables de host_vars en el config para el Master
  lineinfile: 
   path: "{{ temp_config.path }}"
   regexp:  "{{ item.regexp }}"
   line: "{{ item.line }}"
  with_items:
   - {regexp: '^MGMT_INTERFACE=', line: "MGMT_INTERFACE='{{ MGMT_INTERFACE }}'"}
   - {regexp: '^MGMT_CONFIG_TYPE=', line: "MGMT_CONFIG_TYPE='{{ MGMT_CONFIG_TYPE }}'"}
   - {regexp: '^ADDRESS=', line: "ADDRESS='{{ ADDRESS }}'"}
   - {regexp: '^NETMASK=', line: "NETMASK='{{ NETMASK }}'"}
   - {regexp: '^GATEWAY=', line: "GATEWAY='{{ GATEWAY }}'"}
   - {regexp: '^NAMESERVER=', line: "NAMESERVER='{{ NAMESERVER }}'"}
   - {regexp: '^DOMAIN=', line: "DOMAIN='{{ DOMAIN }}'"}
   - {regexp: '^LOG_SIZE_LIMIT=', line: "LOG_SIZE_LIMIT='{{ LOG_SIZE_LIMIT }}'"}
   - {regexp: '^IDS_RULESET=', line: "IDS_RULESET='{{ IDS_RULESET }}'"}
   - {regexp: '^IDS_ENGINE=', line: "IDS_ENGINE='{{ IDS_ENGINE }}'"}
   - {regexp: '^WARN_DISK_USAGE=', line: "WARN_DISK_USAGE='{{ WARN_DISK_USAGE }}'"}
   - {regexp: '^CRIT_DISK_USAGE=', line: "CRIT_DISK_USAGE='{{ CRIT_DISK_USAGE }}'"}
   - {regexp: '^DAYSTOKEEP=', line: "DAYSTOKEEP='{{ DAYSTOKEEP }}'"}
   - {regexp: '^DAYSTOREPAIR=', line: "DAYSTOREPAIR='{{ DAYSTOREPAIR }}'"}

#- name: Print path temp file "{{ temp_config.path }}"
#  debug:
#    msg: "{{ temp_config.path }}"

- name: Execute sosetup for master
  include_role:
    name: securityonion_run_sosetup
  vars:
    sosetupfilepath: "{{ temp_config.path }}"

- name: Change docker bridge IPs
  include_role:
    name: docker_bridge_ip_change

- name: Allow Analyst ports 22/tcp, 443/tcp, and 7734/tcp for {{analyst_network}}
  become: yes
  become_user: root
  expect: 
   command: so-allow
   responses:
     'Please enter your selection': "a"
     'Please enter the IP address': "{{ analyst_network }}"
     'To continue and add this rule, press Enter.': "\r\n"
  when:  ' "{{ allow_analyst_network }}" in "yes" '

- name: Install telegraf
  include_role:
    name: telegraf_install
  when:  ' "{{ INSTALL_TELEGRAF }}" in "yes" '

- name: Reboot machine
  become: yes
  become_user: root
  reboot:
    reboot_timeout: 1000
